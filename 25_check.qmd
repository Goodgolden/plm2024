---
title: "Brokenstick and Linear"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warnings = FALSE,
                      message = FALSE,
                      comment = "#>",
                      cache = TRUE,
                      #results = "hide",
                      digits = 4,
                      error = FALSE)

## clean the R environment
graphics.off()
rm(list = ls())
freshr::freshr()

## load packages
library(here, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(devtools, quietly = TRUE)
library(lme4)
library(nlme)
load_all()


## check the directory for the file
# here::dr_here()
here::set_here()

## the figure or results should be saved 
# paste0("foldername/Sfilename_workingresult_", 
#      Sys.Date(), ".filetype")
```

## Goal for this Chapter

-   [x] to check the brokenstick model impute `bks_plots`

-   [x] to confirm the linear model is the problem `lm_plots`

-   [x] to merge the brokenstick and linear into one step

    -   [x] using dynamic prediction MC `JMbayes::IndvPred_lme()`

    -   [x] writing a new function `plm2024::IndvPred_lmer()`, and it works!!!

    -   [x] comparing it with the `bks_plots` and `lm_plots`

    -   [x] gamlss model for all model

## Step1 Brokenstick model

```{r}

bsk_knots <- c(25, 50, 75, 100, 125, 150)
anchor <- c(32, 45, 60, 90)

mlmf <- "outcome_score ~ adi_value + adi_value:outcome0 + adi_value:t0 +
                      bmi + bmi:outcome0 + bmi:t0 +
                      patient_age + patient_age:outcome0 + patient_age:t0 +
                      patient_gender + patient_gender:outcome0 + patient_gender:t0 +
                      primary_payer + primary_payer:outcome0 + primary_payer:t0 +
                      surgery_type + surgery_type:outcome0 + surgery_type:t0 +
                      outcome0 + t0"

gf <- "outcome_score ~ cs(time, df = 3)"
gs <- "~ cs(time, df = 1)"

lmf <- "outcome_score ~ as.factor(time) + 
                      adi_value + adi_value:outcome0 + adi_value:t0 + 
                      bmi + bmi:outcome0 + bmi:t0 +
                      patient_age + patient_age:outcome0 + patient_age:t0 +
                      patient_gender + patient_gender:outcome0 + patient_gender:t0 +
                      primary_payer + primary_payer:outcome0 + primary_payer:t0 +
                      surgery_type + surgery_type:outcome0 + surgery_type:t0 +
                      outcome0 + t0"
```

### `nlme::lme()` takes too long time

Stef is right, the `nlme::lme()` takes way too long time. Also having the convergence problem with more than six internal knots.

Need to rewrite the `IndvPred_lme()` into the `IndvPred_lmer()`. Probably change the name to as `plm2024::dyn_impute`

```         
Quitting from lines 99-123 [unnamed-chunk-2] (25_check.qmd)
Error in `lme.formula()`:
! optim problem, convergence error code = 1
  message = 
Backtrace:
 1. nlme::lme(...)
 2. nlme::lme.formula(...)
```

### Writing my own function for `IndvPred_lmer()`

```{r}

library(tictoc)

# ctl <- lmeControl(opt = "optim")
# tic()
# bks_nlme <- lme(outcome_score ~ 0 + bs(time, 
#                                        knots = c(25, 50, 75, 100, 125, 150), 
#                                        degree = 1),
#                 random = (~ 0 + bs(time, 
#                                    knots = c(25, 50, 75, 100, 125, 150), 
#                                    degree = 1) | id),
#                 na.action = na.exclude,
#                 control = ctl,
#                 data = tsa_train1)
# toc()

tic()
bks_lmer <- lmer(outcome_score ~ 0 + bs(time, 
                                        knots = c(25, 50, 75, 100, 125, 150),
                                        degree = 1) +
                (0 + bs(time,
                        knots = c(25, 50, 75, 100, 125, 150),
                        degree = 1) | id),
                na.action = na.exclude,
                data = tsa_train1)
toc()
```

```{r}

data1 <- impute_brokenstick(outcome_var = "outcome_score",
                            time_var = "time",
                            id_var = "id",
                            bs_knots = bsk_knots,
                            anchor_time = anchor,
                            data = tsa_train1) %>%
  mutate(time = as.numeric(levels(time))[time])


```

```{r class.output="scroll-100"}
data1 
```

```{r}
#| eval: false
#| fig-wideth: 50
#| fig-height: 60

plot1 <- ggplot() +
  geom_line(data = data1,
            aes(x = as.numeric(time), 
                y = outcome_score, 
                group = id),
            color = "red") +
  geom_point(data = data1,
             aes(x = as.numeric(time), 
                y = outcome_score, 
                group = id)) +
  geom_line(data = tsa_train1,
            aes(x = time, 
                y = outcome_score, 
                group = id),
            color = "grey") +
    facet_wrap(~sid, ncol = 15) +
  theme_bw() +
  theme(legend.position = "none") +
  ylim(0, 100) +
  labs(title = "Individual Trajectories",
       x = "Time",
       y = "Outcome Score")

plot1

# View(data1)
# View(tsa_train1)

ggsave("figure/tsa_25_individual_trajectories.png", 
       plot1, 
       width = 20, 
       height = 45, 
       units = "in", 
       dpi = 300)

```

```{r}
knitr::include_graphics("figure/tsa_25_individual_trajectories.png")

```

## Step2 Imputation

The dynamic prediction will automatically add the intitial values to cause trouble remember to remove all of them.

```{r}
data1_ci50 <- 
  IndvPred_lmer(lmerObject = bks_lmer,
                data = tsa_train1,
                newdata = tsa_train1 %>% group_by(id) %>% slice(1L),
                timeVar = "time",
                M = 500,
                times = anchor,
                all_times = TRUE,
                return_data = TRUE,
                level = 0.50,
                interval = "prediction",
                seed = 555) %>%
  filter(time %in% anchor)

data2_test <- 
  IndvPred_lmer(lmerObject = bks_lmer,
                data = tsa_train1,
                newdata = tsa_test1 %>% group_by(id) %>% slice(1L),
                timeVar = "time",
                M = 500,
                times = anchor,
                all_times = TRUE,
                return_data = TRUE,
                level = 0.50,
                interval = "prediction",
                seed = 555) %>%
  filter(time %in% anchor)

# View(data1_ci50)
## drizopoulos code for building the data.predict
# extract_lmeComponents(bks_nlme, timeVar = "time")
# View(extract_lmeComponents)

```

```{r}
#| eval: false
#| fig-wideth: 50
#| fig-height: 60

plot2 <- ggplot() +
  geom_line(data = data1,
            aes(x = as.numeric(time), 
                y = outcome_score, 
                group = id),
            color = "indianred") +
  geom_point(data = data1,
             aes(x = as.numeric(time), 
                y = outcome_score, 
                group = id)) +
  geom_line(data = data1_ci50,
            aes(x = as.numeric(time), 
                y = pred, 
                group = id),
            color = "darkgreen") +
  geom_point(data = data1_ci50,
             aes(x = as.numeric(time), 
                y = pred, 
                group = id)) +
  geom_line(data = tsa_train1,
            aes(x = time, 
                y = outcome_score, 
                group = id),
            color = "grey") +
    facet_wrap(~sid, ncol = 15) +
  theme_bw() +
  theme(legend.position = "none") +
  ylim(0, 100) +
  labs(title = "Individual Trajectories",
       x = "Time",
       y = "Outcome Score")

plot2

# View(data1)
# View(tsa_train1)

ggsave("figure/tsa_25_dynamic_predict_trajectories.png", 
       plot2, 
       width = 20, 
       height = 45, 
       units = "in", 
       dpi = 300)

```

```{r}
knitr::include_graphics("figure/tsa_25_dynamic_predict_trajectories.png")
```

## Step3 Matching

```{r}
#| eval: false
#| fig-wideth: 50
#| fig-height: 60

data2 <- data2_test %>%
  ungroup() %>%
  dplyr::select(id, time, outcome_score = pred) 

data1 <- data1_ci50 %>%
  ungroup() %>% 
  dplyr::select(id, time, outcome_score = pred)

subset <- data2 %>%
    group_by(id) %>%
    group_map(~ dis_match(lb_train = data1,
                          lb_test_ind = .,
                          train = tsa_train1,
                          match_methods = "euclidean",
                          id_var = id,
                          outcome_var = outcome_score,
                          time_var = time,
                          match_number = 5,
                          match_time = FALSE,
                          match_plot = TRUE),
              .progress = TRUE)

```

```{r}
#| eval: false
#| fig-wideth: 50
#| fig-height: 60

plots <- map(subset, "plot")

library(gridExtra)

ggsave("figure/tsa_25_matching_plot.png", 
       marrangeGrob(grobs = plots, ncol = 15, nrow = 13),
       width = 45, 
       height = 40, 
       units = "in", 
       dpi = 300)
```

```{r}
knitr::include_graphics("figure/tsa_25_matching_plot.png")
```

## Step4 Final prediction

```{r}
#| eval: false
results <- tsa_test1 %>%
  group_by(id) %>%
  group_map(~ as.data.frame(.)) %>% 
  map2(subset, 
       ~try(predict_gamlss(matching = .y$subset,
                           test_one = .x,
                           id_var = id,
                           time_var = time,
                           outcome_var = outcome_score,
                           tmin = 0,
                           tmax = 180,
                           gamlss_formula = gf,
                           gamsigma_formula = gs,
                           predict_plot = TRUE) %>% 
              suppressMessages()),
       .progress = TRUE)


save(results, subset, file = "figure/tsa_25_gamlss_subset_results_data.Rdata")
```

```{r}
#| eval: false
#| fig-wideth: 50
#| fig-height: 60

plots <- map(results, "predictive_centiles")

library(gridExtra)

ggsave("figure/tsa_25_final_predictive_plot.png", 
       marrangeGrob(grobs = plots, ncol = 15, nrow = 13),
       width = 45, 
       height = 40, 
       units = "in", 
       dpi = 300)
```

```{r}
knitr::include_graphics("figure/tsa_25_final_predictive_plot.png")
```







