---
title: "EDA PLM"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warnings = FALSE,
                      message = FALSE,
                      comment = "#>",
                      #results = "hide",
                      digits = 4,
                      error = FALSE)

## clean the R environment
graphics.off()
rm(list = ls())
freshr::freshr()

## load packages
library(here, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(gtsummary, quietly = TRUE)
library(flextable, quietly = TRUE)

library(plmlmm)

## check the directory for the file
# here::dr_here()
here::set_here()

## the figure or results should be saved 
# paste0("foldername/Sfilename_workingresult_", 
#      Sys.Date(), ".filetype")
```

```{css, echo=FALSE}
.scroll-100 {
  max-height: 300px;
  max-width: 1000px;
  overflow-y: auto;
  background-color: inherit;
}
```

```{r}
#| label: loading data


set.seed(555)
tsa0 <- read.csv("newdata/tsa_clean_baseout_2023-11-07.csv", 
                 row.names = 1) %>%
  dplyr::select(id, sid, outcome_type, outcome_score, 
                patient_age, patient_gender, 
                primary_payer, bmi, time) %>%
  fill(patient_age, patient_gender,
       primary_payer, bmi) %>%
  group_by(sid) %>%
  mutate(log_outcome = log(outcome_score + 0.01),
         t0 = min(time),
         id = as.character(id)) %>% 
  filter(time < 365)

tsa1 <- tsa0 %>%
  filter(outcome_type != "baseline")


test_baseline <-  tsa0 %>%
  filter(outcome_type != "baseline") %>%
  group_by(sid) %>%
  slice(1L)

test_id <- tsa1$id %>%
  unique() %>% 
  as.data.frame() %>%
  sample_n(size = 500) %>%
  unlist()

`%!in%` <- Negate(`%in%`)

tsa_train <- tsa1 %>%
  filter(id %!in% test_id)

tsa_test <- tsa1 %>%
  filter(id %in% test_id)

```

```{r}
#| label: imputation

anchor_time <- c(30, 90, 100, 180, 300)
log_tsa_impute <- plmlmm:::impute_brokenstick(outcome_var = "log_outcome",
                                          # outcome_var = "outcome_score",
                                          time_var = "time",
                                          id_var = "sid",
                                          bs_knots = c(50, 150, 250),
                                          anchor_time = anchor_time,
                                          data = tsa_train)


tsa_impute <- plmlmm:::impute_brokenstick(# outcome_var = "log_outcome",
                                          outcome_var = "outcome_score",
                                          time_var = "time",
                                          id_var = "sid",
                                          bs_knots = c(50, 150, 250),
                                          anchor_time = anchor_time,
                                          data = tsa_train)
```

```{r, class.output="scroll-100"}
tsa_impute %>% as.data.frame()

```

```{r, class.output="scroll-100"}
log_tsa_impute %>% as.data.frame()
```

baseline: later we could see the dash and qdash but not now.

-   baseline outcome:

-   baseline time: this is only one time visit (removed at least XX visits) see how many people have two visit. so now i cut off the time for 500 days remove the two visits. three-visit is good

-   surgery time: baseline and surgery time too long

using the estimated values for the baseline... (still need to consider carefully)

```{r}
tsa_linear <- linear_impute(lm_formula = "log_outcome ~ as.factor(time) * patient_gender + patient_age + bmi + (t0 + baseline) ",
                        data_impute = tsa_impute,
                        data_test = test_baseline,
                        id_var = "sid",
                        outcome_var = "log_outcome",
                        time = "time",
                        anchor_time = anchor_time)
```

::: callout-important
A few notes on the linear model step:

1.  time as factor is not flexible enough
2.  assumption is not reasonable to use
3.  gls() or other independent lm() should have been considered
4.  need to talk with Stef about this step
:::

linear model problems

-   i: correlation between individuals -\> sandwich estimators and gls() with kronecker product... this also still require the gls() anyway

-   ii: correlation within individuals -\> gls() can address both ii and iii problems

-   iii: variance change over time... -\> multiple lm() for each anchor time

Here is the linear model for testing impute

```{r, class.output="scroll-100"}
tsa_linear$testing %>% as.data.frame()
tsa_linear$training %>% as.data.frame()
```

the matching step:

1.  whether we directly use the log as the outcome

2.  push into later using the inversed distance as weights (mahalanobis distance)

3.  **if we use the transformation the sandwich estimator is hard to get** **(if we want to update)**

4.  the $\chi^2$ distribution would not hold in this case

```{r}
#| warning: false
#| message: false
outcome <- plmlmm:::people_like_us(train_data = tsa_train,
                                   test_data = tsa_test,
                                   anchor_time = c(30, 60, 90, 180),
                                   brokenstick_knots = c(50, 100, 200),
                                   linear_formula = "outcome_score ~ as.factor(time) *
                                                      patient_gender +
                                                      patient_age:t0 + bmi:t0",
                                   gamlss_formula = "outcome_score ~ cs(time, df = 3)",
                                   gamlss_sigma = "~ cs(time, df = 1)",
                                   tmin = 0,
                                   tmax = 300,
                                   id_var = "id",
                                   outcome_var = "outcome_score",
                                   time = "time",
                                   match_methods = "euclidean",
                                   match_number = 10,
                                   weight = FALSE,
                                   match_plot = TRUE,
                                   predict_plot = TRUE)

# save(outcome, file = paste0("figure/tsa_plmlmm_eda_experimental_", Sys.Date(), ".Rdata"))

load("figure/tsa_plmlmm_eda_experimental_2023-12-04.Rdata")

# log_outcome <- plmlmm:::people_like_us(train_data = tsa_train,
#                                    test_data = tsa_test,
#                                    anchor_time = c(30, 60, 90, 180),
#                                    brokenstick_knots = c(50, 100, 200),
#                                    linear_formula = "log_outcome ~ as.factor(time) * patient_gender + patient_age:t0 + bmi:t0",
#                                    gamlss_formula = "ht ~ cs(time, df = 3)",
#                                    gamlss_sigma = "~ cs(time, df = 1)",
#                                    tmin = 0,
#                                    tmax = 300,
#                                    id_var = "id",
#                                    outcome_var = "log_outcome",
#                                    time = "time",
#                                    match_methods = "euclidean",
#                                    match_number = 10,
#                                    weight = FALSE,
#                                    match_plot = TRUE,
#                                    predict_plot = TRUE)
```

```{r, class.output="scroll-100"}
outcome[[1]]$centiles_observed
```

```{r, class.output="scroll-100"}
outcome[[2]]$centiles_predicted
```

```{r}
outcome[[3]]
```
