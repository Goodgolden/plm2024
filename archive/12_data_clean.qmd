---
title: "Data (Publication)"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE,
                      warnings = FALSE,
                      message = FALSE,
                      comment = "#>",
                      #results = "hide",
                      digits = 4,
                      error = FALSE)

## clean the R environment
graphics.off()
rm(list = ls())
freshr::freshr()

## load packages
library(here, quietly = TRUE)
library(tidyverse, quietly = TRUE)
library(gtsummary, quietly = TRUE)
library(flextable, quietly = TRUE)

## 
library(devtools, quietly = TRUE)
load_all()

## check the directory for the file
# here::dr_here()
here::set_here()

## the figure or results should be saved 
# paste0("foldername/Sfilename_workingresult_", 
#      Sys.Date(), ".filetype")
```

```{css, echo=FALSE}
.scroll-100 {
  max-height: 300px;
  max-width: 1000px;
  overflow-y: auto;
  background-color: inherit;
}
```

```{r clean_data}
#| eval: false
#| include: false

## this part is included in the raw-data folder 
## the code is repeated here for the convenience of the reader

library(readxl)    

read_excel_allsheets <- function(filename, tibble = FALSE) {
    # I prefer straight data.frames
    # but if you like tidyverse tibbles (the default with read_excel)
    # then just pass tibble = TRUE
    sheets <- readxl::excel_sheets(filename)
    x <- lapply(sheets, function(X) readxl::read_excel(filename, sheet = X))
    if(!tibble) x <- lapply(x, as.data.frame)
    names(x) <- sheets
    return(x)
}


files <- read_excel_allsheets("data/tsa_data_deidentified.xlsx")
tsa_base <- files[[1]] %>% 
  janitor::clean_names() %>%
  filter(surgery_type != "Reverse TSA" | empi_deidentified != "0B42B91B3D076ABE846CF23F69B796EAE10B3166") %>%
  filter(surgery_type != "TSA" | empi_deidentified != "47869E3956E405B267ACACC40B9982EB38A55ACA")

## correct the dataset with the wrong empi_deidentified
# 0B42B91B3D076ABE846CF23F69B796EAE10B3166	
# 47869E3956E405B267ACACC40B9982EB38A55ACA

tsa_outcome <- files[[2]] %>% 
  janitor::clean_names()

save(tsa_base, tsa_outcome, tsa_pain, tsa_rom,
     file = paste0("data/tsa_all_data_", 
                   Sys.Date(), ".rdata"))
```

```{r counting_id}
# summary(tsa_base)
# View(tsa_base)
# summary(tsa_outcome)
# summary(tsa_rom)
# View(tsa_rom)

load("~/Desktop/plm2024/data/tsa_base.rda")
load("~/Desktop/plm2024/data/tsa_outcome.rda")

tsa_outcome_id <- unique(tsa_outcome$empi_deidentified)
tsa_base_id <- unique(tsa_base$empi_deidentified)

cat(" The outcome dataset contains ", length(tsa_outcome_id),
    # [1] 2651,
    "unique patients. \n")

tsa_base1 <- tsa_base %>%
  filter(empi_deidentified %in% tsa_outcome_id) %>%
  group_by(empi_deidentified) %>%
  arrange(surgery_dt) %>%
  mutate(surgeryn = n(),
         surgeryt = row_number()) %>%
  ungroup() %>%
  # filter(empi_deidentified %in% tsa_outcome_id) %>%
  dplyr::select(-adi_quintile,
                -primary_payer) %>%
    mutate(patient_age = as.numeric(patient_age),
           adi_value = as.numeric(adi_value),
           bmi = as.numeric(bmi))

tsa_out1 <- tsa_outcome %>%
  group_by(empi_deidentified) %>%
  arrange(outcome_dt) %>%
  mutate(visitn = row_number()) %>%
  ungroup() %>%
  filter(empi_deidentified %in% tsa_base_id) 

table(tsa_base1$empi_deidentified) %>% table()
```

## Summary for the original datasets

Total 2651 unique patients are in the outcomes dataset

-   2304 patients have only one surgery

-   318 patients have two surgeries

-   26 patients have three surgeries

-   3 patients have four surgeries

```{r}
# Check that it doesn't match any non-letter
letters_only <- function(x) !grepl("[^A-Za-z]", x)
# Check that it doesn't match any non-number
numbers_only <- function(x) !grepl("\\D", x)

tsa_baseout0 <- 
  ## change the baseline into outcome format
  data.frame(empi_deidentified = factor(tsa_base1$empi_deidentified), 
             outcome_type = "baseline",
             outcome_dt = tsa_base1$surgery_dt,
             outcome_score = NA,
             visitn = letters[tsa_base1$surgeryt]) %>%
  filter(empi_deidentified %in% tsa_outcome_id) %>%
  ## augment the outcome with baseline
  rbind(tsa_out1) %>%
  arrange(empi_deidentified, outcome_dt) %>% 
  group_by(empi_deidentified) %>%
  ## use lead() to shift the rows one line ahead
  mutate(visitm = lead(visitn),
         id = as.integer(empi_deidentified)) %>%
  mutate(keep = ifelse(letters_only(visitm) & 
                         letters_only(visitn), FALSE, TRUE)) 

tsa_baseout1 <- tsa_baseout0 %>%
  filter(keep == TRUE) %>%
  dplyr::select(-keep, -visitn, -visitm) %>%
  group_by(empi_deidentified) %>%
  arrange(outcome_dt) %>%
  mutate(visitm = row_number() - 1,
         visitmax = n() - 1)
```

We remove the surgeries which does not qualified for the dataset

-   surgeries without any following outcomes in the dataset

```{r}
tsa_baseout2 <- tsa_baseout1 %>%
  filter(outcome_type == "baseline",
         empi_deidentified %in% tsa_outcome_id) %>%
  dplyr::select(-visitm, -visitmax, -outcome_score, -outcome_type) %>%
  group_by(id) %>%
  arrange(outcome_dt) %>%
  mutate(surgeryn = row_number(),
         surgerymax = n())
tsa_baseout2$surgeryn = letters[tsa_baseout2$surgeryn]
table(tsa_baseout2$id) %>% table()
```

Total 2322 unique patients are in the outcomes dataset

-   2141 patients have only one surgery

-   174 patients have two surgeries

-   7 patients have three surgeries

```{r}
clean_id <- tsa_baseout2$id %>% unique() 
tsa_remove <- tsa_baseout0 %>%
  filter(keep == FALSE) 
remove_id <- tsa_remove$id %>% unique()
remove_clean_id <- setdiff(remove_id, clean_id) 
remove_clean <- tsa_baseout0 %>%
  filter(#outcome_type != "baseline",
         id %in% remove_clean_id) %>%
  filter(keep == FALSE)
```

Here are the surgeries which does not qualified for the dataset

```{r, class.output="scroll-100"}
remove_clean
```

```{r}
tsa_baseout3 <- tsa_baseout2 %>% 
  mutate(surgery_max = surgerymax) %>%
  unite(surgery, c("surgerymax", "surgeryn"), sep = "") %>%
  unite(sid, c("id", "surgery"), sep = "_") %>%
  right_join(tsa_baseout1) %>%
  group_by(empi_deidentified) %>%
  arrange(outcome_dt) %>%
  fill(sid) %>%
  arrange(id)

tsa3 <- tsa_baseout3 %>%
  filter(outcome_type == "baseline")

table(tsa3$id) %>% table()
```

```{r}
tsa_baseout4 <- tsa_baseout3 %>%
  mutate(surgery_dt = outcome_dt) %>%
  ## remove outcomes before the first surgery
  filter(!is.na(sid)) %>%
  as.data.frame() %>%
  left_join(tsa_base %>% mutate(baseline = surgery_dt),
            by = c("empi_deidentified", "surgery_dt")) %>%
  dplyr::select(empi_deidentified, id, sid, outcome_dt, surgery_dt = baseline,
         outcome_type, outcome_score, patient_age, patient_gender, 
         primary_payer, surgery_max,
         surgery_type, bmi, contains(c("adi", "cha"))) %>% 
  group_by(sid) %>%
  arrange(outcome_dt) %>%
  fill(surgery_dt) %>%
  mutate(outcome_n = n() - 1,
         time = as.Date(outcome_dt) - as.Date(surgery_dt),
         timemax = max(time)) %>% 
  ungroup() %>%
  mutate(primary_payer = case_when(primary_payer %in% c("Medicaid", "MEDICAID", "Medicaid HMO") ~ "Medicaid",
                     primary_payer %in% c("Medicare", "MEDICARE", "Medicare Advantage") ~ "Medicare",
                     primary_payer %in% c("Workers Comp/Liability") ~ "Workers comp / liability",
                     primary_payer %in% c("Auto/TPL", "AETNA", "Commercial", 
                                          "PEHP", "Regence Blue Cross",
                                          "Tricare", "United HealthCare", 
                                          "Select Health", "SELECTHEALTH") ~ "Commercial",
                     primary_payer %in% c("SELF PAY", "Self Pay") ~ NA))

tsa_base4 <- tsa_baseout4 %>%
  filter(outcome_type == "baseline") %>%
  dplyr::select(id, sid, names(tsa_base), surgery_max, outcome_n, timemax) 

# tsa_baseout5 <- tsa_baseout3 %>%
#   mutate(surgery_dt = outcome_dt) %>%
#   mutate(sid = case_when(is.na(sid) ~ paste0(id, "_0"),
#                         .default = sid)) %>%
#   as.data.frame() %>%
#   # left_join(clean_base1, by = c("empi_deidentified", "surgery_dt")) %>%
#   dplyr::select(-surgery_dt, -visitm, -visitmax)
```

Here we saved two sets of data:

-   `tsa_baseout4` is the baseline dataset without previous outcomes before the surgeries
-   `tsa_baseout5` is the outcome dataset with previous outcoems before the surgeries (removed)

```{r}
tsa_base4$id %>% unique() %>% length()
tsa_baseout4$id %>% unique() %>% length()
# tsa_baseout5$id %>% unique() %>% length()
tsa_base4$sid %>% unique() %>% length()
tsa_baseout4$sid %>% unique() %>% length()
# tsa_baseout5$sid %>% unique() %>% length()

table(tsa_base4$id) %>% table()
```

```{r "new_table1_outcome"}
#| tbl-cap: "Table for number of surgeries missing values"
#| tbl-cap-location: top
table4_base <- tsa_base4 %>%
  group_by(id) %>%
  mutate(surgery_max = n()) %>%
  ungroup() %>%
  dplyr::select(patient_age, patient_gender,
         primary_payer, surgery_type,
         bmi, adi_value, outcome_n, timemax) %>%
  # mutate(adi_quintile = as.factor(adi_quintile)) %>% 
  tbl_summary(
              statistic = all_continuous() ~ c("{median} ({p25}, {p75})",
                                               "({min}, {max})"),
              type = all_continuous() ~ "continuous2") %>%
  ## just display all the variables in one column
  modify_header(label = "**Characteristics**") %>%
  # update the column header
  bold_labels() %>%
  # add_p() %>%
  italicize_labels() %>%
  as_flex_table()

table4_base
```

```{r}
#| label: insurance_check 

tsa_na <- tsa_base4 %>%
  filter(is.na(bmi) | is.na(adi_value) | is.na(primary_payer))
tsa_na %>% nrow()

tsa_base5 <- tsa_base4 %>%
  filter(!is.na(bmi), !is.na(adi_value), !is.na(primary_payer))
tsa5_id <- tsa_base5$sid %>% unique() 

tsa_baseout5 <- tsa_baseout4 %>%
  filter(sid %in% tsa5_id) %>%
  dplyr::select(id, sid, outcome_type, outcome_score, surgery_type,
                patient_age, patient_gender, adi_value,
                primary_payer, bmi, time) 

table(tsa_base5$id) %>% table()

# View(tsa_baseout5)
```

The variables will be used in the linear model (the second step for PLM):

1.  Insurance: need to be cleaned
2.  ADI values: missing values 178 total
3.  BMI values: missing values 41 total
4.  insurance missing: 2 total for self paid

Total missing with either bmi or adi is 213 ids Total non-misisng tsa surgeries sid: 2297 Total non-missing tsa id: 2119 ids

```{r}
## 172 individuals have two surgeries or more
tsa02a <- tsa_baseout5 %>%
  filter(grepl('2b', sid)) %>%
  dplyr::select(sid, id) %>%
  unique() %>%
  na.omit()
tsa03a <- tsa_baseout5 %>%
  filter(grepl('3c', sid)) %>%
  dplyr::select(sid, id) %>%
  unique()

```

```{r}
tsa_baseout6 <- tsa_baseout5 %>%
  # filter(!grepl('2b', sid)) %>%
  group_by(sid) %>%
  arrange(sid) %>%
  # filter(!is.na(adi_value)) %>%
  mutate(log_outcome = log(outcome_score + 0.1),
         # t0 = min(time),
         id = as.character(id)) %>% 
  group_by(sid) %>% 
  fill(patient_age, patient_gender, surgery_type,
         primary_payer, bmi, adi_value) %>%
  ungroup()
# View(tsa_baseout6)
```

The total table of the tsa_baseout6

```{r}
tsa_base6 <- tsa_baseout6 %>%
  filter(outcome_type == "baseline")
table(tsa_base6$id) %>% table()
```

Remove the days more than 365 days

```{r}
tsa_baseout6 <- tsa_baseout6 %>%
  filter(time < 365) %>%
  filter(!grepl('3a', sid), 
         !grepl('3b', sid), 
         !grepl('3c', sid))
tsa_base6 <- tsa_baseout6 %>%
  filter(outcome_type == "baseline")
table(tsa_base6$id) %>% table()
```

```{r}
tsa_baseout6 <- tsa_baseout6 %>%
  group_by(sid) %>%
  mutate(visit_max = n() - 1,
         visit_n = row_number() - 1) %>%
  filter(#!is.na(adi_value),
         # !is.na(bmi),
         visit_max >= 4) 
tsa_base6 <- tsa_baseout6 %>%
  filter(outcome_type == "baseline")
table(tsa_base6$id) %>% table()

```

We filter out visit time larger than 3 times, the follow up time is less than 365 days, and no missing values for adi and bmi, and we keep the first available surgery for the patients with two surgeries.

-   1843 ids for three visit time

-   1719 ids for four visit time

```{r}
tsa02a <- tsa_baseout6 %>%
  filter(grepl('2a', sid)) %>%
  dplyr::select(sid, id) %>%
  unique()
nrow(tsa02a) # 141
tsa02b <- tsa_baseout6 %>%
  filter(grepl('2b', sid)) %>%
  dplyr::select(sid, id) %>%
  unique()
nrow(tsa02b) # 135
id_both <- full_join(tsa02a, tsa02b, by = "id")
nrow(id_both) # 158

sid_ignore <- id_both %>%
  mutate(sid_ignore = case_when(!is.na(sid.x) & !is.na(sid.y) ~ sid.y,
                                !is.na(sid.x) & is.na(sid.y) ~ NA,
                                !is.na(sid.y) & is.na(sid.x) ~ NA)) %>%
  dplyr::select(sid_ignore) %>% 
  na.omit() %>% 
  unlist()
`%!in%` <- Negate(`%in%`)
length(sid_ignore) # 118

tsa_baseout7 <- tsa_baseout6 %>%
  filter(sid %!in% sid_ignore) %>%
  mutate(time = as.numeric(time))

tsa_base7 <- tsa_baseout7 %>% 
  filter(outcome_type == "baseline") 
  
table(tsa_base7$id) %>% table()

```

```{r}
tsa_baseout8 <- tsa_baseout7 %>%
  na.omit() %>% 
  filter(outcome_type != "baseline") %>%
  group_by(sid) %>%
  mutate(t0 = min(time)) %>%
  ungroup()
  
 
# tsa2_base <- tsa1 %>%
#   filter(outcome_type == "baseline") 

tsa_base8 <- tsa_baseout8 %>%
  filter(outcome_type != "baseline") %>%
  group_by(sid) %>%
  slice(1L) %>%
  mutate(log_baseline = log_outcome,
         time0 = time) 


table(tsa_base8$id) %>% table()
tsa_baseline <- tsa_base8

setdiff(tsa_base7$sid, tsa_base8$sid)
setdiff(tsa_base8$sid, tsa_base7$sid)
# View(tsa_baseout8)
```

Split the dataset into training and testing

```{r}
set.seed(5555)
library(splitstackshape)
tsa_train <- stratified(tsa_base8, c('primary_payer'), 2/3)
id_train <- tsa_train$id %>% unique()

tsa_train <- tsa_baseout8 %>%
  filter(id %in% id_train,) %>%
  left_join(tsa_base8) %>% 
  group_by(id) %>%
  fill(log_baseline) %>%
  dplyr::select(-visit_max, -visit_n, -time0) %>%
  na.omit()

tsa_test <- tsa_baseout8 %>%
  filter(id %!in% id_train) %>%
  left_join(tsa_base8)  %>%
  fill(log_baseline) %>%
  dplyr::select(-visit_max, -visit_n, -time0) %>%
  na.omit()

id_test <- tsa_test$id %>% unique()

length(id_test)
length(id_train)
```

```{r, class.output="scroll-100"}
tsa_train
```

```{r, class.output="scroll-100"}
tsa_test
```

```{r}
#| label: final_tsa_baseline

identical(names(tsa_test), names(tsa_train))
# View(tsa_train)
# View(tsa_test)

tsa_baseline <- tsa_baseline %>%
  ungroup() %>%
  mutate(group = ifelse(id %in% id_train, 
                        "1Training", "2Testing"))
length(unique(tsa_baseline$id))
# table(tsa_baseline$id)
```

```{r, class.output="scroll-100"}
tsa_baseline %>% dplyr::select(group, id, sid, everything())
```

```{r "save_data"}
# usethis::use_data_raw("tsa_base")
# usethis::use_data_raw("tsa_outcome")
usethis::use_data(tsa_test,
                  tsa_train,
                  tsa_baseline,
                  internal = TRUE,
                  overwrite = TRUE)
```

```{r}
#| label: sessionInfo
sessionInfo()
```

```{r}
#| include: false
#| eval: false
#| echo: false

## These are the old codes to qualify the surgeries
# base_sid1 <- tsa_base4 %>% 
#   filter(surgery_max == 1) %>%
#   dplyr::select(id, sid, surgery_dt, timemax, outcome_n, everything())
# 
# base_sid2 <- tsa_base4 %>%
#   filter(surgery_max == 2) %>%
#   group_by(id) %>%
#   mutate(surgery_time = row_number(),
#          surgery_dt2 = lead(surgery_dt),
#          surgery_gap = as.Date(surgery_dt2) - as.Date(surgery_dt)) %>%
#   ## Mon Nov  6 12:22:10 2023 ------------------------------
#   ########################
#   ## pay attention here ##
#   ########################
#   dplyr::select(id, sid, surgery_dt, surgery_dt2, 
#          surgery_gap, timemax, outcome_n, everything()) 
# 
# base_sid3 <- tsa_base4 %>%
#   filter(surgery_max == 3) %>%
#   group_by(id) %>%
#   mutate(surgery_time = row_number(),
#          surgery_dt2 = lead(surgery_dt),
#          surgery_gap = as.Date(surgery_dt2) - as.Date(surgery_dt)) %>%
#   # Mon Nov  6 12:34:24 2023 ------------------------------
#   ########################
#   ## pay attention here ##
#   ########################
#   dplyr::select(id, sid, surgery_dt, surgery_dt2, 
#          surgery_gap, timemax, outcome_n, everything()) 
# 
# base_sid2 <- base_sid2 %>%
#   filter(surgery_gap >= 100 | outcome_n > 10 | is.na(surgery_gap)) %>%
#   dplyr::select(-surgery_dt2, -surgery_gap)
# 
# base_sid3 <- base_sid3 %>%
#   filter(surgery_gap >= 100 | outcome_n > 10 | is.na(surgery_gap)) %>%
#   dplyr::select(-surgery_dt2, -surgery_gap)
# 
# id_keep <- c(base_sid1$sid, base_sid2$sid, base_sid3$sid)
# length(id_keep)
```
